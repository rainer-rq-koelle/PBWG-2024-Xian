---
title: BRA Data Preparation
format: 
    pdf:
        papersize: a4
        toc: true
        number-sections: true
execute: 
  freeze: true
---

```{r}
#| label: setup
#| echo: false
#| message: false
source("_chapter-defaults.R")

# load utility files
apts_pbwg <- readxl::read_xlsx("./data/pbwg-apts.xlsx")
apts_eur  <- apts_pbwg |> filter(REG_3 == "EUR") |> pull(ICAO)
apts_bra  <- apts_pbwg |> filter(REG_3 == "BRA")

# data downloaded stored
top_level_path <- here::here() |> dirname()
bra_data_path  <- here::here(top_level_path, "__DATA", "BRA-EUR-hotdata")
```

Data obtained by DECEA --> https://drive.google.com/drive/folders/1gZloRgIM49SmPkFbi2-B89RUeFBwZsu3
Downloaded to local drive for prep action.

```{r}
check_zip_content(here::here(bra_data_path), "Dados-BRA-2024.zip")
```

check input

```{r}
punc_bra <- read_zip(here::here(bra_data_path), "Dados-BRA-2024.zip", "Dados_2024/Monito_Tatico_2024.xlsx")
punc_bra <- punc_bra |> 
    mutate( SCHED_TIME = coerce_xlx_numeric_to_datetime(SCHED_TIME)
           ,BLOCK_TIME = coerce_xlx_numeric_to_datetime(BLOCK_TIME)
           )
```

```{r}
mvt_bra <- list(
    mvt_bra1 = read_zip(
        here::here(bra_data_path)
            , "Dados-BRA-2024.zip"
            , "Dados_2024/TATIC_ano2024.xlsx") |> 
    clean_mov_xlsx()

   ,mvt_bra2 = read_zip(
        here::here(bra_data_path)
            , "Dados-BRA-2024.zip"
            , "Dados_2024/TATIC_ano2024_2.xlsx") |> 
    clean_mov_xlsx()
)

mvt_bra <- mvt_bra |> bind_rows() |> 
    rename(SOBT = PREV_EOBT, SIBT = PREV_EIBT) |> 
    mutate(across( .cols = c(SOBT, AOBT, ATOT, ALDT, AIBT, SIBT)
                  ,.fns  = ~ coerce_xlx_numeric_to_datetime(.x) )
           )
```

 read in - check VRA

```{r}
source("~/RProjects/PBWG-2024-Xian/R/bra-checks-nice-names.R")

chacka <- read_zip(here::here(bra_data_path), "Dados-BRA-2024.zip", "Dados_2024/VRA_ano_2024.csv") |> 
    # standardise names
    dplyr::rename(dplyr::any_of(nice_names)) |> 
    dplyr::mutate(C_FLTID = paste0(OPR, sprintf("%04s", TRIP_NBR))) |> 
    dplyr::mutate(across(.cols =c(ATOT, ALDT, STOT, SLDT), .fns = ~ lubridate::dmy_hm(.x)))

chacka_arrs <- chacka |> 
    select(C_FLTID, ADEP, ADES, TYPE, ALDT, SLDT) |> mutate(PHASE = "ARR") |> 
    mutate(RAND_A100 = runif(n = nrow(chacka_arrs), min = 21, max = 32), A100 = ALDT - (RAND_A100 * 60))

chacka_deps <- chacka |> 
    select(C_FLTID, ADEP, ADES, TYPE, ATOT, STOT) |> mutate(PHASE = "DEP") |> 
    mutate(RAND_D100 = runif(n = nrow(chacka_arrs), min = 2, max = 24), D100 = ATOT + (RAND_D100 * 60))

chacka_mst <- bind_rows(
    chacka_arrs |> pivot_longer(cols = c("SLDT","ALDT","A100"), names_to = "MST", values_to = "TIME")
   ,chacka_deps |> pivot_longer(cols = c("STOT","ATOT","D100"), names_to = "MST", values_to = "TIME")
)
```



## Global Flight Time Variability

* SCHED and BLOCK TIME from punctuality data set
* AOBT/ATOT and ALDT/AIBT from movement data

```{r}
start_date <- ymd("2024-06-17")
end_date   <- start_date + days(28)

gftv <- punc_bra |> 
    filter(  (PHASE == "ARR" & ADEP %in% apts_eur) |
             (PHASE == "DEP" & ADES %in% apts_eur)
           ) |> 
    filter(start_date <= date(SCHED_TIME), date(SCHED_TIME) <= end_date) |> 
    mutate(SRC = "BRA-punc")

# extract from punctualtity data and convert to milestone
gftv <- gftv |> 
    select(-ICAO)|> 
    pivot_longer(cols = contains("TIME"), names_to = "MST", values_to = "TIME") |> 
    mutate(
        MST = case_when(
            PHASE == "ARR" & MST == "SCHED_TIME" ~ "SIBT"
          , PHASE == "ARR" & MST == "BLOCK_TIME" ~ "AIBT"
          , PHASE == "DEP" & MST == "SCHED_TIME" ~ "SOBT"
          , PHASE == "DEP" & MST == "BLOCK_TIME" ~ "AOBT"
          , .default = NA)
     # , SRC = "BRA"
        ) # |> select(-PHASE)

# extract from movement data
gftv_mov <- mvt_bra |> 
    select(FLTID, ICAO, PHASE, TYPE, SOBT, AOBT, ATOT, ALDT, AIBT, SIBT) |> 
    filter(ICAO %in% apts_bra$ICAO) |> 
    pivot_longer(  cols = c("SOBT","AOBT","ATOT","ALDT","AIBT","SIBT")
                 , names_to = "MST", values_to = "TIME") |> 
    mutate(  ADEP = if_else(PHASE == "DEP", ICAO, NA)
           , ADES = if_else(PHASE == "ARR", ICAO, NA)) |> 
    select(-ICAO) |>  #, - PHASE) |> 
    filter(!is.na(TIME)) |> 
    mutate(TOFM_EUR = FLTID %in% gftv$FLTID
           , SRC = "BRA") |> 
  #  filter(TOFM_EUR) |> 
  #  select(-TOFM_EUR) |> 
    filter(between(TIME, start_date, end_date))
```

```{r}
fbb <- bind_rows(gftv, gftv_mov)
# fix
fbb <- fbb |> rename(TIME_SRC = TIME) |> mutate(TIME = TIME_SRC - hours(24))

#2ND GO WORK WITH VRA AND SIMULATED A100 / D100
# get pbwg airports non-bra
pbwg_apts    <- readxl::read_excel("data/pbwg-apts.xlsx")
bra_apts     <- pbwg_apts |> filter(REG_3 == "BRA") |> pull(ICAO)
non_bra_apts <- pbwg_apts |> filter(!ICAO %in% bra_apts) |> pull(ICAO)

start_date <- ymd("2024-06-17")
end_date   <- start_date + days(28)

fb2 <- bind_rows(chacka_mst, gftv |> mutate(C_FLTID = FLTID)) |> 
    select(C_FLTID, ADEP, ADES, TYPE, PHASE, MST, TIME) |> 
    filter(between(TIME, start_date, end_date)) 

fb3 <- fb2 |> 
    mutate(PBWG_ADP = case_when(
       PHASE == "ARR" & ADES %in% bra_apts & ADEP %in% non_bra_apts ~ "PBWG_ADP"
      ,PHASE == "DEP" & ADEP %in% bra_apts & ADES %in% non_bra_apts ~ "PBWG_ADP"
       , .default = NA
    ))
# note - check for other side arrival/dep times know to Brazil!

fb4 <- fb3 |> filter(PBWG_ADP == "PBWG_ADP") |> mutate(SRC = "BRA-withsim")

```

get the European flights

```{r}
gftv_eur <- arrow::read_parquet("./data/sample-apdf-eur-pbwg.parquet")

apdf_to_mst <- function(.apdf){
    arrs <- .apdf |> filter(PHASE == "ARR")
    deps <- .apdf |> filter(PHASE == "DEP")
    
    sibts <- arrs |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = SCHED_TIME) |> mutate(MST = "SIBT", SRC = "EUR")
    sobts <- deps |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = SCHED_TIME) |> mutate(MST = "SOBT", SRC = "EUR")
    
    aldts <- arrs |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = MVT_TIME) |> mutate(MST = "ALDT", SRC = "EUR")
    atots <- deps |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = MVT_TIME) |> mutate(MST = "ATOT", SRC = "EUR")
    
    aibts <- arrs |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = BLOCK_TIME) |> mutate(MST = "AIBT", SRC = "EUR")
    aobts <- deps |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = BLOCK_TIME) |> mutate(MST = "AOBT", SRC = "EUR")
    
    a100 <- arrs |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = C100_TIME) |> mutate(MST = "A100", SRC = "EUR")
    d100 <- deps |> select(FLTID, ADEP, ADES, TYPE, REG, TIME = C100_TIME) |> mutate(MST = "D100", SRC = "EUR")
    
    msts <- bind_rows(sibts, sobts, aldts, atots, aibts, aobts, a100, d100)
}

gftv_eur <- gftv_eur |> apdf_to_mst()
```

BRA-EUR

```{r}
#gftv_bra_eur <- bind_rows(fbb, gftv_eur)
gftv_bra_eur2 <- bind_rows(fb4, gftv_eur)
```


make it work for one service
```{r}
bra_eur_gotcha <- list()
```


```{r}
clean_ids <- c("AEA057")
mst_seq   <- c("SOBT" = 1, "AOBT" = 2, "D100" = 3, "A100" = 4, "ALDT" = 5, "AIBT" = 6, "SIBT" = 7)

AEA057 <- gftv_bra_eur |> filter(ADEP == "LEMD", ADES == "SBGR") |> 
    mutate(
        DOF = date(TIME)
      , C_FLTID = case_when(
          FLTID == "AEA0057" ~ "AEA057", FLTID == "AEA057" ~ "AEA057"
          , .default = FLTID)
      , MST_SEQ = mst_seq[MST]
      ,FLT_LBL = ifelse(MST == "SOBT", 1, 0)
      ) |> 
    filter(
         DOF %in% c(ymd("2024-06-17"), ymd("2024-06-18"))
        ,C_FLTID %in% clean_ids) |> 
    arrange(TIME) |> 
    mutate(FLT_LBL = cumsum(FLT_LBL)) |> 
    select(C_FLTID, FLTID, ADEP, ADES, MST, MST_SEQ, FLT_LBL, TIME, everything())
```

calculate stuff

```{r}
# create wide milestone table
#-------- tbd

# calc difftimes when exist
calc_difftime_when_given <- function(.time2, .time1){
    if(is.na(.time2) | is.na(.time1)){
        delta = NA
    }else{
        delta = difftime(.time2, .time1, units ="min")
    }
    delta |> as.numeric()
}

# calculate flight time variability per phase
# * get stats
# * taxi-out
# * enroute
# * taxi-in
calc_phases <- function(.wide_mst){
    tmp <- .wide_mst |> dplyr::group_by(C_FLTID, FLT_LBL) |> 
        dplyr::rowwise() |> 
        # overall stats -------------------
        dplyr::mutate(
            SET = calc_difftime_when_given(SIBT, SOBT)
           ,AET = calc_difftime_when_given(AIBT, AOBT) 
        #   ,AFT = calc_difftime_when_given(ALDT, ATOT) 
           ) |> 
        # phase durations
        dplyr::mutate(
             TXOT = calc_difftime_when_given(ATOT, AOBT)
            ,TXIT = calc_difftime_when_given(AIBT, ALDT)
        )
        dplyr::ungroup()
    tmp
}

AEA057 |> pivot_wider(id_cols = c(C_FLTID, ADEP, ADES, FLT_LBL), names_from = "MST", values_from = "TIME") |> 
    calc_phases()
```

