---
title: "crunch airport data"
format: html
---


```{r}
#| label: setup
#| echo: false
#| message: false
source("_chapter-defaults.R")

library(tidyverse)

# path to data
pth_data <- here::here() |> dirname()
pth_apdf <- here::here(pth_data, "__DATA","APDF")
```

```{r}
source("~/RProjects/PBWG-2024-Xian/R/apdf-nice-names.R")

apt <- "LEMD"

fn_2023 <- check_zip_content(pth_apdf,"apdf-2023.zip") |> 
    filter(grepl(pattern = apt, x = Name))
ds_2023 <- read_zip(pth_apdf, "apdf-2023.zip", fn_2023$Name) |> 
    trim_apdf_for_pbwg() |> 
    make_nice_names_apdf()  |> 
    append_dof()

fn_2024 <- check_zip_content(pth_apdf,"apdf-2024-JanSep.zip") |> 
    filter(grepl(pattern = apt, x = Name))
ds_2024 <- read_zip(pth_apdf, "apdf-2024-JanSep.zip", fn_2024$Name) |> 
    trim_apdf_for_pbwg() |> 
    make_nice_names_apdf() |> 
    append_dof()
```


# Daily Traffic

output
ICAO,DATE,ARRS,DEPS,SRC_NA,ARRS_REG,DEPS_REG,HEL,H,M,L,NA

```{r}
source("~/RProjects/PBWG-2024-Xian/R/apt-daily-stats.R")

stats_2023 <- ds_2023 |> airport_daily_stats(.apt = apt, .yr = 2023)
stats_2024 <- ds_2024 |> airport_daily_stats(.apt = apt, .yr = 2024)

stats_2023 |> arrow::write_parquet(paste0("./data/apt-tfc-", apt, "-2023.parquet"))
stats_2024 |> arrow::write_parquet(paste0("./data/apt-tfc-", apt, "-2024.parquet"))
```

# Throughput

```{r}
source("~/RProjects/PBWG-2024-Xian/R/apt-throughput.R")
source("~/RProjects/PBWG-2024-Xian/R/xhelp-check-vars.R")

ds_2023 |> calc_throughput("15 min") |> arrange(BIN) |> 
    filter(lubridate::year(BIN) == 2023) |> 
    arrow::write_parquet(paste0("./data/apt-thrus-", apt, "-2023.parquet"))

ds_2024 |> calc_throughput("15 min") |> arrange(BIN) |> 
    filter(lubridate::year(BIN) == 2024) |> 
    arrow::write_parquet(paste0("./data/apt-thrus-", apt, "-2024.parquet"))
```


# Punctuality

## Arrival 

```{r}
source("~/RProjects/PBWG-2024-Xian/R/apt-punctuality-from-apdf.R")

get_punc_arrs <- function(.apdf, .apt = apt, .yr = NULL){
    tmp <-  .apdf |> filter(PHASE == "ARR", CLASS != "HEL") |> 
    mutate(ICAO = .apt) |> 
    add_delay_and_dlygrp() |> 
    pivot_daily_dly_by_grp() |> 
    calc_earlylatewithin_bins()
    
    if(!is.null(.yr)) tmp <- tmp |> 
            filter(lubridate::year(DATE) == .yr)
    
    return(tmp)
}

punc_arrs_2023 <- get_punc_arrs(ds_2023, apt, 2023)
punc_arrs_2024 <- get_punc_arrs(ds_2024, apt, 2024)
```

write out arrival punctuality

```{r}
punc_arrs_2023 |> arrow::write_parquet(paste0("./data/apt-punc-arr-", apt, "-2023.parquet"))
punc_arrs_2024 |> arrow::write_parquet(paste0("./data/apt-punc-arr-", apt, "-2024.parquet"))
```

## Departure

```{r}
get_punc_deps <- function(.apdf, .apt = apt, .yr = NULL){
    tmp <-  .apdf |> filter(PHASE == "DEP", CLASS != "HEL") |> 
    mutate(ICAO = .apt) |> 
    add_delay_and_dlygrp() |> 
    pivot_daily_dly_by_grp() |> 
    calc_earlylatewithin_bins()
    
    if(!is.null(.yr)) tmp <- tmp |> 
            filter(lubridate::year(DATE) == .yr)
    
    return(tmp)
}

punc_deps_2023 <- get_punc_deps(ds_2023, apt, 2023)
punc_deps_2024 <- get_punc_deps(ds_2024, apt, 2024)
```

write out departure punctuality

```{r}
punc_deps_2023 |> arrow::write_parquet(paste0("./data/apt-punc-dep-", apt, "-2023.parquet"))
punc_deps_2024 |> arrow::write_parquet(paste0("./data/apt-punc-dep-", apt, "-2024.parquet"))
```

# Taxi-In

PBWG convention --> base year 2023

```{r}
txits_2023 <- ds_2023 |> filter(PHASE == "ARR") |> 
    select(ICAO = ADES, PHASE, ALDT = MVT_TIME, AIBT = BLOCK_TIME, RWY, STND) |> 
    mutate(TXIT = difftime(AIBT, ALDT, units = "min") |> as.numeric()) |> 
    filter(TXIT < 75)

txits_2024 <- ds_2024 |> filter(PHASE == "ARR") |> 
    select(ICAO = ADES, PHASE, ALDT = MVT_TIME, AIBT = BLOCK_TIME, RWY, STND) |> 
    mutate(TXIT = difftime(AIBT, ALDT, units = "min") |> as.numeric()) |> 
    filter(TXIT < 75)
 
refs_2023 <- txits_2023 |> 
    group_by(STND, RWY) |> 
    reframe(
        SMPL = dplyr::n()
        ,REF_MEAN = mean(TXIT, na.rm = TRUE)
        ,REF_P20  = quantile(TXIT, probs = 0.2 , na.rm = TRUE)
        ,REF_P05  = quantile(TXIT, probs = 0.05, na.rm = TRUE)
        ,REF_P15  = quantile(TXIT, probs = 0.15, na.rm = TRUE)
        ,REF_PBWG = (REF_P05 + REF_P15)/2
        ) |> 
    mutate(ICAO = apt, YEAR = 2023)
```

check coverage of txits in 2024
LTFM about 192 unrecognised combinations

```{r}
out_fn <- paste0("./data/apt-txit-ref-", apt, ".csv")

refs_2023 |> 
    mutate(PHASE = "ARR") |> select(ICAO, YEAR, PHASE, everything()) |>
    write_csv(out_fn)
```

output: ICAO,PHASE,DATE,MVTS,ADD_TIME,AVG_ADD_TIME

```{r}
refs <- read_csv(out_fn, show_col_types = FALSE) |> 
    select(ICAO, PHASE, STND, RWY, REF = REF_PBWG)

calc_txit <- function(.txits, .refs){
    tmp <- .txits |> 
        dplyr::left_join(.refs, by = dplyr::join_by(ICAO, PHASE, RWY, STND)) |> 
        dplyr::mutate(
             ADD_TIME = TXIT - REF
            ,DATE = lubridate::date(AIBT)
        )
    tmp <- tmp |> dplyr::group_by(ICAO, PHASE, DATE) |> 
        dplyr::reframe(
            MVTS = sum(!is.na(ADD_TIME)) #dplyr::n()
            , TOT_REF = sum(REF, na.rm = TRUE)
            , TOT_ADD_TIME = sum(ADD_TIME, na.rm = TRUE)
            , TX_NA = sum(is.na(ADD_TIME), na.rm = TRUE)
            ) |> 
        dplyr::mutate(AVG_ADD_TIME = TOT_ADD_TIME / MVTS)
    return(tmp)
}
```

```{r}
tx <- txits_2023 |> calc_txit(refs) |> filter(lubridate::year(DATE) == 2023)
tx |> arrow::write_parquet(paste0("./data/apt-txit-", apt, "-2023.parquet"))

tx <- txits_2024 |> calc_txit(refs) |> filter(lubridate::year(DATE) == 2024)
tx |> arrow::write_parquet(paste0("./data/apt-txit-", apt, "-2024.parquet"))
```



# Taxi-Out

PBWG convention --> base year 2023

```{r}
txots_2023 <- ds_2023 |> filter(PHASE == "DEP") |> 
    select(ICAO = ADEP, PHASE, ATOT = MVT_TIME, AOBT = BLOCK_TIME, RWY, STND) |> 
    mutate(TXOT = difftime(ATOT, AOBT, units = "min") |> as.numeric()) |> 
    filter(TXOT < 180)

txots_2024 <- ds_2024 |> filter(PHASE == "DEP") |> 
    select(ICAO = ADEP, PHASE, ATOT = MVT_TIME, AOBT = BLOCK_TIME, RWY, STND) |> 
    mutate(TXOT = difftime(ATOT, AOBT, units = "min") |> as.numeric()) |> 
    filter(TXOT < 180)
 
refs_2023 <- txots_2023 |> 
    group_by(PHASE, STND, RWY) |> 
    reframe(
        SMPL = dplyr::n()
        ,REF_MEAN = mean(TXOT, na.rm = TRUE)
        ,REF_P20  = quantile(TXOT, probs = 0.2 , na.rm = TRUE)
        ,REF_P05  = quantile(TXOT, probs = 0.05, na.rm = TRUE)
        ,REF_P15  = quantile(TXOT, probs = 0.15, na.rm = TRUE)
        ,REF_PBWG = (REF_P05 + REF_P15)/2
        ) |> 
    mutate(ICAO = apt, YEAR = 2023)
```

check coverage of txots in 2024
LTFM about 358 unrecognised combinations by Sept 2024 ~ 0.2%

```{r}
out_fn <- paste0("./data/apt-txot-ref-", apt, ".csv")

refs_2023 |> select(ICAO, YEAR, PHASE, everything()) |>
    write_csv(out_fn)
```

output: ICAO,PHASE,DATE,MVTS,ADD_TIME,AVG_ADD_TIME

```{r}
refs <- read_csv(out_fn, show_col_types = FALSE) |> 
    select(ICAO, PHASE, STND, RWY, REF = REF_PBWG)

calc_txot <- function(.txots, .refs){
    tmp <- .txots |> 
        dplyr::left_join(.refs, by = dplyr::join_by(ICAO, PHASE, RWY, STND)) |> 
        dplyr::mutate(
             ADD_TIME = TXOT - REF
            ,DATE = lubridate::date(AOBT)
        )
    tmp <- tmp |> dplyr::group_by(ICAO, PHASE, DATE) |> 
        dplyr::reframe(
            MVTS = sum(!is.na(ADD_TIME)) #dplyr::n()
            , TOT_REF = sum(REF, na.rm = TRUE)
            , TOT_ADD_TIME = sum(ADD_TIME, na.rm = TRUE)
            , TX_NA = sum(is.na(ADD_TIME), na.rm = TRUE)
            ) |> 
        dplyr::mutate(AVG_ADD_TIME = TOT_ADD_TIME / MVTS)
    return(tmp)
}
```

```{r}
# write-out taxi-out times
tx <- txots_2023 |> calc_txot(refs) |> filter(lubridate::year(DATE) == 2023)
tx |> arrow::write_parquet(paste0("./data/apt-txot-", apt, "-2023.parquet"))

tx <- txots_2024 |> calc_txot(refs) |> filter(lubridate::year(DATE) == 2024)
tx |> arrow::write_parquet(paste0("./data/apt-txot-", apt, "-2024.parquet"))
```


# ASMA

```{r}
extract_asma_payload <- function(.apdf, .apt = apt, .yr = NULL){
    tmp <- .apdf |> 
        dplyr::filter(ADES == .apt) |> 
        dplyr::select(ICAO = ADES, PHASE, CLASS, MVT_TIME, RWY, contains("C40"), contains("C100")) |> 
        dplyr::mutate(
            A40  = difftime(MVT_TIME, C40_TIME,  units = "mins") |> as.numeric()
           ,A100 = difftime(MVT_TIME, C100_TIME, units = "mins") |> as.numeric()
            )
    if(!is.null(.yr)) tmp <- tmp |> dplyr::filter(lubridate::year(MVT_TIME) == .yr)
    tmp
}


asma_2023 <- ds_2023 |> extract_asma_payload(apt, 2023) 
asma_2024 <- ds_2024 |> extract_asma_payload(apt, 2024)
```

establish ASMA sectors

```{r}
check_asma_sector <- function(.asma_payload, .sect = sect, .binwidth = 6){
    this_apt   <- unique(.asma_payload$ICAO)
    this_phase <- unique(.asma_payload$PHASE)
    
    check_vis <- .asma_payload |> 
        pivot_longer(cols = c("C40_BRG","C100_BRG"), names_to = "RANGE", values_to = "BRG") |> 
        ggplot() +
        geom_histogram(aes(x = BRG), binwidth = 3) +
        geom_vline(xintercept = sect, linetype = "dotdash", color = "blue") +
        facet_wrap(.~ RANGE) +
        labs(title = paste0(this_apt, " - ASMA sectors - "))
    
    return(check_vis)    
}
```

```{r}
# ASMA sectorisation

if(apt == "EDDM") sect <- c(90, 220, 300)     # done
if(apt == "EDDF") sect <- c(0,50,170,280,360)      # done
if(apt == "EGLL") sect <- c(0,110,170,230,300,360)      # done
# if(apt == "EGKK") sect <- c(0,105,180,300,360)          # done
if(apt == "EHAM") sect <- c(0,150,250,360)       # done
if(apt == "LFPG") sect <- c(0,90,180,270,360)           # done
if(apt == "LEMD") sect <- c(0,80, 170, 260, 360) # done
#if(apt == "LEBL") sect <- c(35, 80, 115, 215, 255, 330)         # check issue with 2022
if(apt == "LIRF") sect <- c(0, 45, 90, 150, 215, 285, 360) # done
if(apt == "LSZH") sect <- c(0,50,115,195,265,340,360)   # done 

if(apt == "LTFM") sect <- c(0, 35,90, 180, 325)
# if(apt == "EFHK") sect <- c(0, 35,85, 130, 290)

sect <- c(0, sect, 360) |> unique()

asma_2023 |> filter(!is.na(C40_BRG) | !is.na(C100_BRG)) |> check_asma_sector()
```

```{r}
refs <- asma_2023 |>
  drop_na() |> 
  mutate( C40_SECT  = cut(C40_BRG,  breaks = sect)
         ,C100_SECT = cut(C100_BRG, breaks = sect) 
         , A40      = difftime(MVT_TIME, C40_TIME, units = "mins") |> as.numeric()
         , A100     = difftime(MVT_TIME, C100_TIME,units = "mins") |> as.numeric()
         ) 

# to-do - wrap 40NM or 100NM in helper function
ref40 <- refs  |> 
  group_by(CLASS, RWY, C40_SECT) |> 
  summarise(N = n()
            , REF_P20 = quantile(A40, probs = 0.2)
            , REF_P05 = quantile(A40, probs = 0.05)
            , REF_P15 = quantile(A40, probs = 0.15)
            , .groups = "drop") |> 
  mutate(ICAO = apt, RANGE = "40NM"
         , REF_PBWG = (REF_P05 + REF_P15)/2
         ) |> 
  select(ICAO, RANGE, everything()) |> 
  drop_na()


ref100 <- refs  |> 
  group_by(CLASS, RWY, C100_SECT) |> 
  summarise(N = n()
            , REF_P20 = quantile(A100, probs = 0.2)
            , REF_P05 = quantile(A100, probs = 0.05)
            , REF_P15 = quantile(A100, probs = 0.15)
            , .groups = "drop") |> 
  mutate(ICAO = apt, RANGE = "100NM"
          , REF_PBWG = (REF_P05 + REF_P15)/2
         ) |> 
  select(ICAO, RANGE, everything()) |> 
  drop_na()
```

write out reference times for ASMA

```{r}
out_asma_fn <- paste0("./data/apt-asma-ref-", apt, ".csv") 

bind_rows(ref40, ref100) |> 
    mutate(PHASE = "ARR") |> 
  write_csv(out_asma_fn)
```

calculate ASMA 
Airport	Date	Number of Flights	Arrival Runway Configuration	Entry Fix_Sector	WTC	Total ASMA travel time	Total ASMA reference time	Total additional ASMA time	Average additional ASMA time
```{r}
asma_refs <- read_csv(out_asma_fn, show_col_types = FALSE) |> 
    filter(!is.na(C100_SECT)) |> 
    select(ICAO, PHASE, RANGE, CLASS, RWY, C100_SECT, REF = REF_PBWG)

prep_asma <- function(.asma, .refs = asma_refs){ 
    tmp <- .asma |> 
        select(ICAO, PHASE, CLASS, RWY, MVT_TIME, A100, C100_BRG) |> 
        drop_na() |> 
        mutate(
             DATE = lubridate::date(MVT_TIME)
            ,C100_SECT = cut(C100_BRG, breaks = sect) 
            ) |> 
        left_join(asma_refs, by = join_by(ICAO, PHASE, CLASS, RWY, C100_SECT)) |> 
        mutate(ADD_ASMA = A100 - REF)
    return(tmp)
}

pbwg_asma_daily <- function(.prepped_asma){
    tmp <- .prepped_asma |> 
        dplyr::group_by(ICAO, DATE, PHASE, CLASS, RWY, C100_SECT) |> 
        dplyr::reframe(
            FLTS = n()
            , TOT_A100 = sum(A100, na.rm = TRUE)
            , TOT_REF = sum(REF, na.rm = TRUE)
            , TOT_ADD = sum(ADD_ASMA, na.rm = TRUE)
            )
    return(tmp)
}

```

```{r}
asma_2023 |> prep_asma() |> pbwg_asma_daily() |> 
    arrow::write_parquet(paste0("./data/apt-asma-", apt, "-2023.parquet"))

asma_2024 |> prep_asma() |> pbwg_asma_daily() |> 
    arrow::write_parquet(paste0("./data/apt-asma-", apt, "-2024.parquet"))
```


# DSMA

```{r}
extract_dsma_payload <- function(.apdf, .apt = apt, .yr = NULL){
    tmp <- .apdf |> 
        dplyr::filter(ADEP == .apt) |> 
        dplyr::select(ICAO = ADEP, PHASE, CLASS, MVT_TIME, RWY, contains("C40"), contains("C100")) |> 
        dplyr::mutate(
            D40  = difftime(C40_TIME,  MVT_TIME,  units = "mins") |> as.numeric()
           ,D100 = difftime(C100_TIME, MVT_TIME,  units = "mins") |> as.numeric()
            )
    if(!is.null(.yr)) tmp <- tmp |> dplyr::filter(lubridate::year(MVT_TIME) == .yr)
    tmp
}


dsma_2023 <- ds_2023 |> extract_dsma_payload(apt, 2023) 
dsma_2024 <- ds_2024 |> extract_dsma_payload(apt, 2024)
```

establish DSMA sectors

```{r}
check_dsma_sector <- function(.dsma_payload, .sect = sect, .binwidth = 6){
    this_apt   <- unique(.dsma_payload$ICAO)
    this_phase <- unique(.dsma_payload$PHASE)
    
    check_vis <- .dsma_payload |> 
        pivot_longer(cols = c("C40_BRG","C100_BRG"), names_to = "RANGE", values_to = "BRG") |> 
        ggplot() +
        geom_histogram(aes(x = BRG), binwidth = 3) +
        geom_vline(xintercept = sect, linetype = "dotdash", color = "blue") +
        facet_wrap(.~ RANGE) +
        labs(title = paste0(this_apt, " - DSMA sectors - "))
    
    return(check_vis)    
}
```

```{r}
# DSMA sectorisation

if(apt == "EDDM") sect <- c(75, 150, 220,360)     # done
if(apt == "EDDF") sect <- c(0,210,265,360)      # done
if(apt == "EGLL") sect <- c(0,130,200,265,315,360)      # done
#if(apt == "EGKK") sect <- c(0,105,180,300,360)          # not for Xian
if(apt == "EHAM") sect <- c(0,75,145,230,280,360)       # done
if(apt == "LFPG") sect <- c(0,50,130,225,300,360)       # done
if(apt == "LEMD") sect <- c(0,70,220, 300, 360) # done
#if(apt == "LEBL") sect <- c(35, 80, 115, 215, 255, 330)         # check issue with 2022
if(apt == "LIRF") sect <- c(0, 50, 130, 230, 300, 360) # done
if(apt == "LSZH") sect <- c(0,50,115,195,265,340,360)   # done

if(apt == "LTFM") sect <- c(0,90, 180, 280,360)
#if(apt == "EFHK") sect <- c(0, 35,85, 130, 290)

sect <- c(0, sect, 360) |> unique()

dsma_2023 |> filter(!is.na(C40_BRG) | !is.na(C100_BRG)) |> check_dsma_sector()
```

```{r}
refs <- dsma_2023 |>
  drop_na() |> 
  mutate( C40_SECT  = cut(C40_BRG,  breaks = sect)
         ,C100_SECT = cut(C100_BRG, breaks = sect) 
         ) 

# to-do - wrap 40NM or 100NM in helper function
ref40 <- refs  |> 
  group_by(CLASS, RWY, C40_SECT) |> 
  summarise(N = n()
            , REF_P20 = quantile(D40, probs = 0.2)
            , REF_P05 = quantile(D40, probs = 0.05)
            , REF_P15 = quantile(D40, probs = 0.15)
            , .groups = "drop") |> 
  mutate(ICAO = apt, RANGE = "40NM"
         , REF_PBWG = (REF_P05 + REF_P15)/2
         ) |> 
  select(ICAO, RANGE, everything()) |> 
  drop_na()


ref100 <- refs  |> 
  group_by(CLASS, RWY, C100_SECT) |> 
  summarise(N = n()
            , REF_P20 = quantile(D100, probs = 0.2)
            , REF_P05 = quantile(D100, probs = 0.05)
            , REF_P15 = quantile(D100, probs = 0.15)
            , .groups = "drop") |> 
  mutate(ICAO = apt, RANGE = "100NM"
          , REF_PBWG = (REF_P05 + REF_P15)/2
         ) |> 
  select(ICAO, RANGE, everything()) |> 
  drop_na()
```

write out reference times for DSMA

```{r}
out_dsma_fn <- paste0("./data/apt-dsma-ref-", apt, ".csv") 

bind_rows(ref40, ref100) |> 
    mutate(PHASE = "DEP") |> 
  write_csv(out_dsma_fn)
```


```{r}
dsma_refs <- read_csv(out_dsma_fn, show_col_types = FALSE) |> 
    filter(!is.na(C100_SECT)) |> 
    select(ICAO, PHASE, RANGE, CLASS, RWY, C100_SECT, REF = REF_PBWG)

prep_dsma <- function(.dsma, .refs = dsma_refs, .sect = sect){ 
    tmp <- .dsma |> 
        select(ICAO, PHASE, CLASS, RWY, MVT_TIME, D100, C100_BRG) |> 
        drop_na() |> 
        mutate(
             DATE = lubridate::date(MVT_TIME)
            ,C100_SECT = cut(C100_BRG, breaks = .sect) 
            ) |> 
        left_join(.refs, by = join_by(ICAO, PHASE, CLASS, RWY, C100_SECT)) |> 
        mutate(ADD_DSMA = D100 - REF)
    return(tmp)
}

pbwg_dsma_daily <- function(.prepped_dsma){
    tmp <- .prepped_dsma |> 
        dplyr::group_by(ICAO, DATE, PHASE, CLASS, RWY, C100_SECT) |> 
        dplyr::reframe(
            FLTS = n()
            , TOT_D100 = sum(D100, na.rm = TRUE)
            , TOT_REF = sum(REF, na.rm = TRUE)
            , TOT_ADD = sum(ADD_DSMA, na.rm = TRUE)
            )
    return(tmp)
}

```

```{r}
dsma_2023 |> prep_dsma() |> 
    filter(ADD_DSMA < 60) |>
    pbwg_dsma_daily() |> 
     arrow::write_parquet(paste0("./data/apt-dsma-", apt, "-2023.parquet"))

dsma_2024 |> prep_dsma() |> 
    filter(ADD_DSMA < 60) |>
    pbwg_dsma_daily() |> 
     arrow::write_parquet(paste0("./data/apt-dsma-", apt, "-2024.parquet"))
```






# EUR Results 

## Daily Traffic

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-tfc-[EL][A-Z]{3}", full.names = TRUE)

tfc <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

tfc |> 
    ggplot() +
    geom_path(aes(x = DOF, y = ARRS + DEPS, group = lubridate::year(DOF))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "daily flights")
```

## Total Throughput

The quarter hour peak throughput is calculated as the 95th percentile of the total movements observed on a 15 minute basis.

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-thrus-[EL][A-Z]{3}", full.names = TRUE)

thrus <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

peak_thrus <- thrus |> mutate(YEAR = lubridate::year(BIN)) |> 
    group_by(ICAO, YEAR) |> 
    summarise(N = n(), PK_TOT_THRU = quantile(FLTS, probs = 0.95)) |> 
    mutate(YEAR = as.character(YEAR))

peak_thrus |> 
    ggplot() +
    geom_col(aes(x = ICAO, y = PK_TOT_THRU, group = YEAR, fill = YEAR), position = position_dodge2()) + 
    facet_wrap(. ~ ICAO, scales = "free_x") +
    labs(x = element_blank(), y = "peak total throughput")
```

## Punctuality

### Arrival Punctuality

```{r}
fns <- list.files(path = "./data", pattern = "^apt-punc-arr-[EL][A-Z]{3}", full.names = TRUE)

punc_arrs <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

punc_arrs |> arrange(DATE) |> 
    ggplot() +
    geom_path(aes(x = DATE, y = `Within (-15,15)`/ VALID, group = lubridate::year(DATE))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "arr punctuality within 15 min")

```

### Departure Punctuality

```{r}
fns <- list.files(path = "./data", pattern = "^apt-punc-dep-[EL][A-Z]{3}", full.names = TRUE)

punc_deps <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

punc_deps |> arrange(DATE) |> 
    ggplot() +
    geom_path(aes(x = DATE, y = `Within (-15,15)`/ VALID, group = lubridate::year(DATE))) + 
    scale_y_continuous(limits = c(0,NA)) +
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "arr punctuality within 15 min")

```


## Taxi-In Times

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-txit-[EL][A-Z]{3}", full.names = TRUE)

txits <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

txits |> 
    ggplot() +
    geom_path(aes(x = DATE, y = AVG_ADD_TIME, group = lubridate::year(DATE))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "avg. taxi-in time")
```

## Taxi-Out Times

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-txot-[EL][A-Z]{3}", full.names = TRUE)

txots <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

txots |> 
    ggplot() +
    geom_path(aes(x = DATE, y = AVG_ADD_TIME, group = lubridate::year(DATE))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "avg. taxi-out time")
```

## Additional ASMA Time

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-asma-[EL][A-Z]{3}", full.names = TRUE)

asmas <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

daily_asma <- asmas |> 
    group_by(ICAO, DATE, PHASE) |> 
    reframe(across(c(FLTS, TOT_A100, TOT_REF, TOT_ADD), .fns = sum)) |> 
    mutate(AVG_ASMA = TOT_ADD / FLTS)

daily_asma |> 
    ggplot() +
    geom_path(aes(x = DATE, y = AVG_ASMA, group = lubridate::year(DATE))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "avg. add. ASMA time")
```

## Additional DSMA Time

```{r}
fns <- list.files(path = "./data/", pattern = "^apt-dsma-[EL][A-Z]{3}", full.names = TRUE)

dsmas <- fns |> purrr::map(.x, .f = ~ arrow::read_parquet(.x)) |> 
    dplyr::bind_rows()

daily_dsma <- dsmas |> 
    group_by(ICAO, DATE, PHASE) |> 
    reframe(across(c(FLTS, TOT_D100, TOT_REF, TOT_ADD), .fns = sum)) |> 
    mutate(AVG_DSMA = TOT_ADD / FLTS)

daily_dsma |> 
    ggplot() +
    geom_path(aes(x = DATE, y = AVG_DSMA, group = lubridate::year(DATE))) + 
    facet_wrap(. ~ ICAO) +
    labs(x = element_blank(), y = "avg. add. DSMA time")
```
